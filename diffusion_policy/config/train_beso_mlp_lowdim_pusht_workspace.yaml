defaults:
  - _self_
  - task: pusht_lowdim

name: train_beso_mlp_lowdim
_target_: diffusion_policy.workspace.train_diffusion_unet_lowdim_workspace.TrainDiffusionUnetLowdimWorkspace

obs_dim: ${task.obs_dim}
action_dim: ${task.action_dim}
task_name: ${task.name}
exp_name: "default"

horizon: 1
n_obs_steps: 1
n_action_steps: 1
n_latency_steps: 0
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_cond: True
pred_action_steps_only: False

policy:
  _target_: diffusion_policy.policy.beso_mlp_low_dim_policy.BesoMlpLowdimPolicy

  model:
    _target_: diffusion_policy.model.beso.score_mlps.GCTimeScoreNetwork
    input_dim: ${eval:'${action_dim} if ${obs_as_cond} else ${obs_dim} + ${action_dim}'}
    output_dim: ${policy.model.input_dim}
    cond_dim: ${eval:'${obs_dim} if ${obs_as_cond} else 0'}
    embed_fn:
      _target_: diffusion_policy.model.beso.utils.return_time_sigma_embedding_model
      # 'GaussianFourier' 'FourierFeatures' or 'Sinusoidal'
      embedding_type: 'GaussianFourier'
      time_embed_dim: 16 # ${t_dim} # ${hidden_dim}
      device: ${training.device}
    n_layer: 8
    hidden_dim: 512
    dropout: 0.0
    model_style: True # true refers to Residual MLP and false refers to default MLP
    norm_style: 'BatchNorm'
    use_norm: False
    use_spectral_norm: False
    device: ${training.device}

  num_inference_steps: 3
  # current sampler types:
  # 'lms', 'euler', 'heun', 'ancestral', 'dpm', 'euler_ancestral', 'dpmpp_2s_ancestral', 'dpmpp_2m','dpm_fast', 'dpm_adaptive',
  sampler_type: 'ddim'
  sigma_data: 0.5
  rho: 5.
  sigma_min: 0.005 # 0.002 # 0.42
  sigma_max: 1 # 40.5 # 33 # 11
  # sample density stuff
  sigma_sample_density_type:  'loglogistic'
  sigma_sample_density_mean: -2 # -0.61
  sigma_sample_density_std: -2  # -2 # 1.58
  noise_scheduler: 'exponential'

  horizon: ${horizon}
  obs_dim: ${obs_dim}
  action_dim: ${action_dim}
  n_action_steps: ${n_action_steps}
  n_obs_steps: ${n_obs_steps}
  obs_as_cond: ${obs_as_cond}
  pred_action_steps_only: ${pred_action_steps_only}

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 512
  num_workers: 1
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 512
  num_workers: 1
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  # Transformer needs LR warmup
  lr_warmup_steps: 1000
  num_epochs: 500
  gradient_accumulate_every: 1
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 50
  checkpoint_every: 50
  val_every: 10
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
